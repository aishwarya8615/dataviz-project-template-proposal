(function (d3) {
  'use strict';

  const dropdownMenu = (selection, props) => {
    const {
      options,
      onOptionClicked,
      selectedOption
    } = props;
    
    let select = selection.selectAll('select').data([null]);
    select = select.enter().append('select')
      .merge(select)
        .on('change', function() {
  		onOptionClicked(this.value);  
    	  });
    
    const option = select.selectAll('option').data(options);
    option.enter().append('option')
      .merge(option)
        .attr('value', d => d)
        .property('selected', d => d === selectedOption)
        .text(d => d);
  };

  const scatterPlot = (selection, props) => {
    const {
      xValue,
      xAxisLabel,
      yValue,
      colorValue,
      colorScale,
      circleRadius,
      yAxisLabel,
      margin,
      width,
      height,
      data
    } = props;
    
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth])
      .nice();
    
    const yScale = d3.scaleLinear();
    yScale.domain(d3.extent(data, yValue));
    yScale.range([innerHeight, 0]);
    yScale.nice();
    
    const g = selection.selectAll('.container').data([null]);
    const gEnter = g
      .enter().append('g')
        .attr('class', 'container');
    gEnter
      .merge(g)
        .attr('transform',
          `translate(${margin.left},${margin.top})`
        );
    
    const xAxis = d3.axisBottom(xScale)
      .tickSize(-innerHeight)
      .tickPadding(15);
    
    const yAxis = d3.axisLeft(yScale)
      .tickSize(-innerWidth)
      .tickPadding(10);
    
    const yAxisG = g.select('.y-axis');
    const yAxisGEnter = gEnter
      .append('g')
        .attr('class', 'y-axis');
    yAxisG
      .merge(yAxisGEnter)
        .call(yAxis)
        .selectAll('.domain').remove();
    
    const yAxisLabelText = yAxisGEnter
      .append('text')
        .attr('class', 'axis-label')
        .attr('y', -50)
        .attr('fill', 'black')
        .attr('transform', `rotate(-90)`)
        .attr('text-anchor', 'middle')
      .merge(yAxisG.select('.axis-label'))
        .attr('x', -innerHeight / 2)
        .text(yAxisLabel);
    
    
    const xAxisG = g.select('.x-axis');
    const xAxisGEnter = gEnter
      .append('g')
        .attr('class', 'x-axis');
    xAxisG
      .merge(xAxisGEnter)
        .attr('transform', `translate(0,${innerHeight})`)
        .call(xAxis)
        .selectAll('.domain').remove();
    
    const xAxisLabelText = xAxisGEnter
      .append('text')
        .attr('class', 'axis-label')
        .attr('y', 20)
        .attr('fill', 'black')
      .merge(xAxisG.select('.axis-label'))
        .attr('x', innerWidth / 2)
        .text(xAxisLabel);

    
    const circles = g.merge(gEnter)
      .selectAll('circle').data(data);
    circles
      .enter().append('circle')
        .attr('cx', innerWidth / 2)
        .attr('cy', innerHeight / 2)
        .attr('r', 0)
      .merge(circles)
        .attr('fill', d => colorScale(colorValue(d)))
      .transition().duration(2000)
      .delay((d, i) => i * 10)
        .attr('cy', d => yScale(yValue(d)))
        .attr('cx', d => xScale(xValue(d)))
        .attr('r', circleRadius);
  };

  const colorLegend = (selection, props) => {
    const {
      colorScale,
      circleRadius,
      spacing,
      textOffset
    } = props;

    const groups = selection.selectAll('g')
      .data(colorScale.domain());
    const groupsEnter = groups
      .enter().append('g')
        .attr('class', 'tick');
    groupsEnter
      .merge(groups)
        .attr('transform', (d, i) =>
          `translate(0, ${i * spacing})`
        );
    groups.exit().remove();
    
    groupsEnter.append('circle')
      .merge(groups.select('circle'))
        .attr('r', circleRadius)
        .attr('fill', colorScale);
    
    groupsEnter.append('text')
      .merge(groups.select('text'))
        .text(d => d)
        .attr('dy', '0.32em')
        .attr('x', textOffset);
  };

  const svg = d3.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');

  let data;
  let xColumn;
  let yColumn;
  let colorColumn;

  const onXColumnClicked = column => {
    xColumn = column;
    render();
  };

  const onYColumnClicked = column => {
    yColumn = column;
    render();
  };

  const onColorColumnClicked = column => {
    colorColumn = column;
    render();
  };

  const render = () => {
    
    const colorValue = d => d[colorColumn];
    
    const colorScale = d3.scaleOrdinal()
      .domain(data.map(colorValue))
      .range(d3.schemeCategory10);
    
    
    d3.select('#x-menu')
      .call(dropdownMenu, {
        options: data.columns,
        onOptionClicked: onXColumnClicked,
        selectedOption: xColumn
      });
    
    d3.select('#y-menu')
      .call(dropdownMenu, {
        options: data.columns,
        onOptionClicked: onYColumnClicked,
        selectedOption: yColumn
      });
    
    d3.select('#color-menu')
      .call(dropdownMenu, {
        options: data.columns,
        onOptionClicked: onColorColumnClicked,
        selectedOption: colorColumn
      });
    
    const circleRadius = 10;
    
    svg.call(scatterPlot, {
      xValue: d => d[xColumn],
      xAxisLabel: xColumn,
      yValue: d => d[yColumn],
      colorScale,
      colorValue,
      circleRadius,
      yAxisLabel: yColumn,
      margin: { top: 10, right: 40, bottom: 88, left: 80 },
      width,
      height,
      data
    });
    
    svg.append('g')
      .attr('transform', `translate(800,50)`)
      .call(colorLegend, {
        colorScale,
        circleRadius,
        spacing: 40,
        textOffset: 10
      });
  };

  d3.csv('https://gist.githubusercontent.com/aishwarya8615/89d9f36fc014dea62487f7347864d16a/raw/Life_Expectancy_Data.csv')
    .then(loadedData => {
      data = loadedData;
      data.forEach(d => {
        d.Life_expectancy  = +d.Life_expectancy ;
        d.Year = +d.Year ;
        d.BMI = +d.BMI ;
        d.Alcohol = +d.Alcohol;
        d.Diphtheria = +d.Diphtheria;
        d.GDP = +d.GDP;
        d.Schooling = +d.Schooling;
        d.Polio = +d.Polio; 
        d.Total_expenditure = +d.Total_expenditure;  
        d.Population = +d.Population;  
        d.Adult_Mortality = +d.Adult_Mortality;  
        d.infant_deaths = +d.infant_deaths;  
        d.percentage_expenditure = +d.percentage_expenditure;  
        d.Measles = +d.Measles; 
        d.under_five_deaths = +d.under_five_deaths; 
        d.Income_composition_of_resources = +d.Income_composition_of_resources; 
        //d.Year = +parseYear(d.Year)
      });
      xColumn = data.columns[11];
      yColumn = data.columns[4];
      colorColumn = data.columns[1];
    
      render();
    });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,