(function (d3$1) {
  'use strict';

  const dropDownMenu = (selection, props) => {
    const {
      options,
      onOptionClicked,
      selectedOption
    } = props;
    
    let select = selection.selectAll('select').data([null]);
    select = select.enter().append('select')
      .merge(select)
        .on('change', function() {
  		onOptionClicked(this.value);  
    	  });
    
    const option = select.selectAll('option').data(options);
    option.enter().append('option')
      .merge(option)
        .attr('value', d => d)
        .property('selected', d => d === selectedOption)
        .text(d => d);
  };

  const scatterPlot = (selection, props) => {
    const {
      xValue,
      xAxisLabel,
      yValue,
      circleRadius,
      yAxisLabel,
      margin,
      width,
      height,
      data,
      color,
      cValue,
      selectedLegend,
      tipMouseover,
      tipMouseout
    } = props;
      
    const innerWidth = width - margin.left - margin.right -230;
    const innerHeight = height - margin.top - margin.bottom;
    
    const xScale = d3$1.scaleLog()
      .domain(d3$1.extent(data, xValue))
      .range([0, innerWidth]);
    
    const yScale = d3$1.scaleLog()
      .domain(d3$1.extent(data, yValue))
      .range([innerHeight, 0])
      .nice();
    
    const g = selection.selectAll('.container').data([null]);
    const gEnter = g
      .enter().append('g')
        .attr('class', 'container');
    gEnter.merge(g)
        .attr('transform', 
          `translate(${margin.left},${margin.top})`
        );
    
    const AxisTickFormat = number => d3$1.format(".1s")(number)
      .replace('G', 'B');
    
    const xAxis = d3$1.axisBottom(xScale)
      .tickFormat(AxisTickFormat) 
      .tickSize(-innerHeight)
      .tickPadding(15);
    
    const yAxis = d3$1.axisLeft(yScale)
      .tickFormat(AxisTickFormat) 
      .tickSize(-innerWidth)
      .tickPadding(10);
    
    const yAxisG = g.select('.y-axis');  
    const yAxisGEnter = gEnter
      .append('g')
        .attr('class', 'y-axis');
    
    yAxisG
      .merge(yAxisGEnter)
        .call(yAxis)
        .selectAll('.domain').remove();
    
    
    const yAxisLabelText = yAxisGEnter
      .append('text')
        .attr('class', 'axis-label')
        .attr('y', -55)
        .attr('fill', 'black')
        .attr('transform', `rotate(-90)`)
        .attr('text-anchor', 'middle')
      .merge(yAxisG.select('.axis-label'))
        .attr('x', -innerHeight / 2)
        .text(yAxisLabel);
    
    
    const xAxisG = g.select('.x-axis');  
    const xAxisGEnter = gEnter
      .append('g')
        .attr('class', 'x-axis');
    xAxisG
      .merge(xAxisGEnter)
        .attr('transform', `translate(0,${innerHeight})`)
        .call(xAxis)
        .selectAll('.domain').remove();
    
    const xAxisLabelText = xAxisGEnter
      .append('text')
        .attr('class', 'axis-label')
        .attr('y', 75)
        .attr('fill', 'black')
      .merge(xAxisG.select('.axis-label'))
        .attr('x', innerWidth / 2)
        .text(xAxisLabel);
    
    const circles = g.merge(gEnter)
      .selectAll('circle').data(data);
    circles
      .enter().append('circle')
        .attr('cx', innerWidth / 2)
        .attr('cy', innerHeight / 2)
        .attr('r', 0)
    		.attr('opacity', 0.8)
      	.on('mouseover', tipMouseover)
        .on('mouseout', tipMouseout)
      .merge(circles)
      .transition().duration(1000)
      .delay((d, i) => i * 2)
        .attr('cy', d => yScale(yValue(d)))
        .attr('cx', d => xScale(xValue(d)))
        .attr('r', circleRadius)
        .attr('fill', d => color(cValue(d)));
    
    circles
      .merge(circles)
        .attr('opacity', d =>
          (!selectedLegend || selectedLegend === cValue(d))
            ? 0.8
            : 0.05
        )
      	.attr('r', d =>
          (selectedLegend === cValue(d))
            ? 2*circleRadius
            : circleRadius
       	);

  };

  const colorLegend = ( selection, props ) => {
    
    const {
      color,
      width,
      onClick,
      selectedLegend
    } = props;
    
    var legend = selection.selectAll(".legend").data(color.domain());
    var legendEnter = legend
      .enter().append("g")
        .attr("class", "legend");
    
    legendEnter
      .merge(legend)
        .attr("transform", (d, i) => `translate(-40,${(i + 8.5) * 50})`)
        .attr('opacity', d => 
          (!selectedLegend || d === selectedLegend)
            ? 1
            : 0.2
        )
        .on('click', d => onClick(
  				d === selectedLegend
      			? null
      			: d
  			));
        

      
    // draw legend colored rectangles
    legendEnter.append("rect")
        .attr("x", width-80)
        .attr("y", -400)
        .attr("width", 18)
        .attr("height", 18)
        .attr("fill", color);

    // draw legend text
    legendEnter.append("text")
        .attr("x", width-85)
        .attr("y", -370)
        .attr("dy", ".6em")
        .style("text-anchor", "start")
        .text(function(d) { return d;});
    
  };

  const svg = d3$1.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');
  const margin = { top: 10, right: -50, bottom: 90, left: 40 };

  const color = d3$1.scaleOrdinal(d3$1.schemeCategory10);

  const cValue = data => data['Continent'];
    

  let data;
  let xColumn;
  let yColumn;
  let selectedLegend;


  const onXColumnClicked = column => {
    xColumn = column;  
    render();
  };

  const onYColumnClicked = column => {
    yColumn = column;  
    render();
  };

  const onClick = d => {
    selectedLegend = d;
  //  console.log({selectedLegend});
    render();
  };

  const scatterG = svg.append('g')
    .attr('transform', `translate(${margin.left},${margin.top})`);

  var tipMouseover = function (d) {
    var html = d['Continent'] + "<br/>" +
      "<span style='color:" + color(cValue(d)) + ";'>" + d['Year'] + "</span><br/>" +
      "<b>" + d[xColumn] + `</b> ${xColumn}, <b/>` + d[yColumn] + `</b> ${yColumn}`;
    d3$1.select('.tooltip').html(html)
      .style("left", (d3.event.pageX + 15) + "px")
      .style("top", (d3.event.pageY - 28) + "px")
      .transition()
      .duration(200) 
      .style("opacity", .9);
    
  };

  // tooltip mouseout event handler
  var tipMouseout = function (d) {
    d3$1.select('.tooltip').transition()
      .duration(300) 
      .style("opacity", 0);
  };


  const render = () => {
    
    d3$1.select('#x-menu')
      .call(dropDownMenu, {
        options: data.columns.filter(column =>
          column !== 'Country' &&
          column !== 'Status' &&
          column !== 'Alcohol'&&
          column !== 'percentage_expenditure' &&
          column !== 'Hepatitis_B' &&
          column !== 'Measles '&&        
          column !== 'Schooling' &&
          column !== 'under_five_deaths '&&
          column !== 'Polio' &&
          column !== 'Total_expenditure' &&
          column !== 'Diphtheria '&&
          column !== 'Population'&&        
          column !== ' thinness  1-19 years' &&
          column !== ' thinness 5-9 years'&&
          column !== 'Income_composition_of_resources' &&
          //column !== 'under_five_deaths' && 
          column !== 'Continent' &&
          column !== 'infant_deaths' &&
          column !== yColumn
        ),
        onOptionClicked: onXColumnClicked,
        selectedOption: xColumn
    });
    
    d3$1.select('#y-menu')
      .call(dropDownMenu, {
        options: data.columns.filter(column =>
          column !== 'Country' &&
          column !== 'Status' &&
          column !== 'Alcohol'&&
          column !== 'percentage_expenditure' &&
          column !== 'Hepatitis_B' &&
          column !== 'Measles '&&        
          column !== 'Schooling' &&
          column !== 'under_five_deaths '&&
          column !== 'Polio' &&
          column !== 'Total_expenditure' &&
          column !== 'Diphtheria ' &&
          column !== 'Population' &&        
          column !== ' thinness  1-19 years' &&
          column !== ' thinness 5-9 years'&&
          column !== 'Income_composition_of_resources' &&   
          //column !== 'under_five_deaths' && 
          column !== 'Continent' &&
          column !== 'infant_deaths' &&
          column !== xColumn
        ),
        onOptionClicked: onYColumnClicked,
        selectedOption: yColumn
    });
    
    scatterG.call(scatterPlot, {
      xValue: d => d[xColumn],
      xAxisLabel: xColumn,
      yValue: d => d[yColumn],
      circleRadius: 4,
      yAxisLabel: yColumn,
      margin: margin,
      width,
      height,
      data,
      color,
      cValue,
      selectedLegend,
      tipMouseover,
      tipMouseout
    });
    
    svg.call(colorLegend, {
      color,
      width,
      onClick,
      selectedLegend
    });
    
    d3$1.select('body').append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);

  };

  d3$1.csv('https://gist.githubusercontent.com/aishwarya8615/89d9f36fc014dea62487f7347864d16a/raw/Life_Expectancy_Data.csv')
    .then(loadedData => {
      data = loadedData;
      data.forEach(d => {
        d['Adult_Mortality'] = +d['Adult_Mortality'];
        d['infant_deaths'] = +d['infant_deaths'];
        d['Life_expectancy '] = +d['Life_expectancy '];
        d['Schooling'] = +d['Schooling'];
        d['GDP'] = +d['GDP'];
        d['Year'] = +d['Year'];
        d[' HIV/AIDS'] = +d[' HIV/AIDS'];
        d['Alcohol'] = +d['Alcohol'];
         d['BMI'] = +d['BMI'];
      });
      xColumn = data.columns[16];
      yColumn = data.columns[4];
      render();
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImRyb3BEb3duTWVudS5qcyIsInNjYXR0ZXJQbG90LmpzIiwiY29sb3JMZWdlbmQuanMiLCJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZHJvcERvd25NZW51ID0gKHNlbGVjdGlvbiwgcHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIG9wdGlvbnMsXG4gICAgb25PcHRpb25DbGlja2VkLFxuICAgIHNlbGVjdGVkT3B0aW9uXG4gIH0gPSBwcm9wcztcbiAgXG4gIGxldCBzZWxlY3QgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKCdzZWxlY3QnKS5kYXRhKFtudWxsXSk7XG4gIHNlbGVjdCA9IHNlbGVjdC5lbnRlcigpLmFwcGVuZCgnc2VsZWN0JylcbiAgICAubWVyZ2Uoc2VsZWN0KVxuICAgICAgLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcblx0XHRvbk9wdGlvbkNsaWNrZWQodGhpcy52YWx1ZSk7ICBcbiAgXHQgIH0pO1xuICBcbiAgY29uc3Qgb3B0aW9uID0gc2VsZWN0LnNlbGVjdEFsbCgnb3B0aW9uJykuZGF0YShvcHRpb25zKTtcbiAgb3B0aW9uLmVudGVyKCkuYXBwZW5kKCdvcHRpb24nKVxuICAgIC5tZXJnZShvcHRpb24pXG4gICAgICAuYXR0cigndmFsdWUnLCBkID0+IGQpXG4gICAgICAucHJvcGVydHkoJ3NlbGVjdGVkJywgZCA9PiBkID09PSBzZWxlY3RlZE9wdGlvbilcbiAgICAgIC50ZXh0KGQgPT4gZCk7XG59OyIsImltcG9ydCB7XG4gIHNlbGVjdCxcbiAgc2NhbGVMb2csXG4gIGV4dGVudCxcbiAgYXhpc0xlZnQsXG4gIGF4aXNCb3R0b20sXG4gIGZvcm1hdFxufSBmcm9tICdkMyc7XG5cbmV4cG9ydCBjb25zdCBzY2F0dGVyUGxvdCA9IChzZWxlY3Rpb24sIHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICB4VmFsdWUsXG4gICAgeEF4aXNMYWJlbCxcbiAgICB5VmFsdWUsXG4gICAgY2lyY2xlUmFkaXVzLFxuICAgIHlBeGlzTGFiZWwsXG4gICAgbWFyZ2luLFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBkYXRhLFxuICAgIGNvbG9yLFxuICAgIGNWYWx1ZSxcbiAgICBzZWxlY3RlZExlZ2VuZCxcbiAgICB0aXBNb3VzZW92ZXIsXG4gICAgdGlwTW91c2VvdXRcbiAgfSA9IHByb3BzO1xuICAgIFxuICBjb25zdCBpbm5lcldpZHRoID0gd2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCAtMjMwO1xuICBjb25zdCBpbm5lckhlaWdodCA9IGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuICBcbiAgY29uc3QgeFNjYWxlID0gc2NhbGVMb2coKVxuICAgIC5kb21haW4oZXh0ZW50KGRhdGEsIHhWYWx1ZSkpXG4gICAgLnJhbmdlKFswLCBpbm5lcldpZHRoXSlcbiAgXG4gIGNvbnN0IHlTY2FsZSA9IHNjYWxlTG9nKClcbiAgICAuZG9tYWluKGV4dGVudChkYXRhLCB5VmFsdWUpKVxuICAgIC5yYW5nZShbaW5uZXJIZWlnaHQsIDBdKVxuICAgIC5uaWNlKCk7XG4gIFxuICBjb25zdCBnID0gc2VsZWN0aW9uLnNlbGVjdEFsbCgnLmNvbnRhaW5lcicpLmRhdGEoW251bGxdKTtcbiAgY29uc3QgZ0VudGVyID0gZ1xuICAgIC5lbnRlcigpLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAnY29udGFpbmVyJyk7XG4gIGdFbnRlci5tZXJnZShnKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIFxuICAgICAgICBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYFxuICAgICAgKTtcbiAgXG4gIGNvbnN0IEF4aXNUaWNrRm9ybWF0ID0gbnVtYmVyID0+IGZvcm1hdChcIi4xc1wiKShudW1iZXIpXG4gICAgLnJlcGxhY2UoJ0cnLCAnQicpO1xuICBcbiAgY29uc3QgeEF4aXMgPSBheGlzQm90dG9tKHhTY2FsZSlcbiAgICAudGlja0Zvcm1hdChBeGlzVGlja0Zvcm1hdCkgXG4gICAgLnRpY2tTaXplKC1pbm5lckhlaWdodClcbiAgICAudGlja1BhZGRpbmcoMTUpO1xuICBcbiAgY29uc3QgeUF4aXMgPSBheGlzTGVmdCh5U2NhbGUpXG4gICAgLnRpY2tGb3JtYXQoQXhpc1RpY2tGb3JtYXQpIFxuICAgIC50aWNrU2l6ZSgtaW5uZXJXaWR0aClcbiAgICAudGlja1BhZGRpbmcoMTApO1xuICBcbiAgY29uc3QgeUF4aXNHID0gZy5zZWxlY3QoJy55LWF4aXMnKTsgIFxuICBjb25zdCB5QXhpc0dFbnRlciA9IGdFbnRlclxuICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3ktYXhpcycpO1xuICBcbiAgeUF4aXNHXG4gICAgLm1lcmdlKHlBeGlzR0VudGVyKVxuICAgICAgLmNhbGwoeUF4aXMpXG4gICAgICAuc2VsZWN0QWxsKCcuZG9tYWluJykucmVtb3ZlKCk7XG4gIFxuICBcbiAgY29uc3QgeUF4aXNMYWJlbFRleHQgPSB5QXhpc0dFbnRlclxuICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2F4aXMtbGFiZWwnKVxuICAgICAgLmF0dHIoJ3knLCAtNTUpXG4gICAgICAuYXR0cignZmlsbCcsICdibGFjaycpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgYHJvdGF0ZSgtOTApYClcbiAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgIC5tZXJnZSh5QXhpc0cuc2VsZWN0KCcuYXhpcy1sYWJlbCcpKVxuICAgICAgLmF0dHIoJ3gnLCAtaW5uZXJIZWlnaHQgLyAyKVxuICAgICAgLnRleHQoeUF4aXNMYWJlbCk7XG4gIFxuICBcbiAgY29uc3QgeEF4aXNHID0gZy5zZWxlY3QoJy54LWF4aXMnKTsgIFxuICBjb25zdCB4QXhpc0dFbnRlciA9IGdFbnRlclxuICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3gtYXhpcycpO1xuICB4QXhpc0dcbiAgICAubWVyZ2UoeEF4aXNHRW50ZXIpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCR7aW5uZXJIZWlnaHR9KWApXG4gICAgICAuY2FsbCh4QXhpcylcbiAgICAgIC5zZWxlY3RBbGwoJy5kb21haW4nKS5yZW1vdmUoKTtcbiAgXG4gIGNvbnN0IHhBeGlzTGFiZWxUZXh0ID0geEF4aXNHRW50ZXJcbiAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdheGlzLWxhYmVsJylcbiAgICAgIC5hdHRyKCd5JywgNzUpXG4gICAgICAuYXR0cignZmlsbCcsICdibGFjaycpXG4gICAgLm1lcmdlKHhBeGlzRy5zZWxlY3QoJy5heGlzLWxhYmVsJykpXG4gICAgICAuYXR0cigneCcsIGlubmVyV2lkdGggLyAyKVxuICAgICAgLnRleHQoeEF4aXNMYWJlbCk7XG4gIFxuICBjb25zdCBjaXJjbGVzID0gZy5tZXJnZShnRW50ZXIpXG4gICAgLnNlbGVjdEFsbCgnY2lyY2xlJykuZGF0YShkYXRhKTtcbiAgY2lyY2xlc1xuICAgIC5lbnRlcigpLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgIC5hdHRyKCdjeCcsIGlubmVyV2lkdGggLyAyKVxuICAgICAgLmF0dHIoJ2N5JywgaW5uZXJIZWlnaHQgLyAyKVxuICAgICAgLmF0dHIoJ3InLCAwKVxuICBcdFx0LmF0dHIoJ29wYWNpdHknLCAwLjgpXG4gICAgXHQub24oJ21vdXNlb3ZlcicsIHRpcE1vdXNlb3ZlcilcbiAgICAgIC5vbignbW91c2VvdXQnLCB0aXBNb3VzZW91dClcbiAgICAubWVyZ2UoY2lyY2xlcylcbiAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDEwMDApXG4gICAgLmRlbGF5KChkLCBpKSA9PiBpICogMilcbiAgICAgIC5hdHRyKCdjeScsIGQgPT4geVNjYWxlKHlWYWx1ZShkKSkpXG4gICAgICAuYXR0cignY3gnLCBkID0+IHhTY2FsZSh4VmFsdWUoZCkpKVxuICAgICAgLmF0dHIoJ3InLCBjaXJjbGVSYWRpdXMpXG4gICAgICAuYXR0cignZmlsbCcsIGQgPT4gY29sb3IoY1ZhbHVlKGQpKSk7XG4gIFxuICBjaXJjbGVzXG4gICAgLm1lcmdlKGNpcmNsZXMpXG4gICAgICAuYXR0cignb3BhY2l0eScsIGQgPT5cbiAgICAgICAgKCFzZWxlY3RlZExlZ2VuZCB8fCBzZWxlY3RlZExlZ2VuZCA9PT0gY1ZhbHVlKGQpKVxuICAgICAgICAgID8gMC44XG4gICAgICAgICAgOiAwLjA1XG4gICAgICApXG4gICAgXHQuYXR0cigncicsIGQgPT5cbiAgICAgICAgKHNlbGVjdGVkTGVnZW5kID09PSBjVmFsdWUoZCkpXG4gICAgICAgICAgPyAyKmNpcmNsZVJhZGl1c1xuICAgICAgICAgIDogY2lyY2xlUmFkaXVzXG4gICAgIFx0KTtcblxufTsiLCJleHBvcnQgY29uc3QgY29sb3JMZWdlbmQgPSAoIHNlbGVjdGlvbiwgcHJvcHMgKSA9PiB7XG4gIFxuICBjb25zdCB7XG4gICAgY29sb3IsXG4gICAgd2lkdGgsXG4gICAgb25DbGljayxcbiAgICBzZWxlY3RlZExlZ2VuZFxuICB9ID0gcHJvcHM7XG4gIFxuICB2YXIgbGVnZW5kID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5sZWdlbmRcIikuZGF0YShjb2xvci5kb21haW4oKSlcbiAgdmFyIGxlZ2VuZEVudGVyID0gbGVnZW5kXG4gICAgLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxlZ2VuZFwiKVxuICBcbiAgbGVnZW5kRW50ZXJcbiAgICAubWVyZ2UobGVnZW5kKVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQsIGkpID0+IGB0cmFuc2xhdGUoLTQwLCR7KGkgKyA4LjUpICogNTB9KWApXG4gICAgICAuYXR0cignb3BhY2l0eScsIGQgPT4gXG4gICAgICAgICghc2VsZWN0ZWRMZWdlbmQgfHwgZCA9PT0gc2VsZWN0ZWRMZWdlbmQpXG4gICAgICAgICAgPyAxXG4gICAgICAgICAgOiAwLjJcbiAgICAgIClcbiAgICAgIC5vbignY2xpY2snLCBkID0+IG9uQ2xpY2soXG5cdFx0XHRcdGQgPT09IHNlbGVjdGVkTGVnZW5kXG4gICAgXHRcdFx0PyBudWxsXG4gICAgXHRcdFx0OiBkXG5cdFx0XHQpKTtcbiAgICAgIFxuXG4gICAgXG4gIC8vIGRyYXcgbGVnZW5kIGNvbG9yZWQgcmVjdGFuZ2xlc1xuICBsZWdlbmRFbnRlci5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAuYXR0cihcInhcIiwgd2lkdGgtODApXG4gICAgICAuYXR0cihcInlcIiwgLTQwMClcbiAgICAgIC5hdHRyKFwid2lkdGhcIiwgMTgpXG4gICAgICAuYXR0cihcImhlaWdodFwiLCAxOClcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCBjb2xvcik7XG5cbiAgLy8gZHJhdyBsZWdlbmQgdGV4dFxuICBsZWdlbmRFbnRlci5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAuYXR0cihcInhcIiwgd2lkdGgtODUpXG4gICAgICAuYXR0cihcInlcIiwgLTM3MClcbiAgICAgIC5hdHRyKFwiZHlcIiwgXCIuNmVtXCIpXG4gICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAudGV4dChmdW5jdGlvbihkKSB7IHJldHVybiBkO30pO1xuICBcbn07IiwiaW1wb3J0IHtcbiAgc2VsZWN0LFxuICBjc3YsXG4gIHNjYWxlTGluZWFyLFxuICBleHRlbnQsXG4gIGF4aXNMZWZ0LFxuICBheGlzQm90dG9tLFxuICBmb3JtYXQsXG4gIHNjYWxlT3JkaW5hbCxcbiAgc2NoZW1lQ2F0ZWdvcnkxMFxufSBmcm9tICdkMyc7XG5cbmltcG9ydCB7IGRyb3BEb3duTWVudSB9IGZyb20gJy4vZHJvcERvd25NZW51JztcbmltcG9ydCB7IHNjYXR0ZXJQbG90IH0gZnJvbSAnLi9zY2F0dGVyUGxvdCc7XG5pbXBvcnQgeyBjb2xvckxlZ2VuZCB9IGZyb20gJy4vY29sb3JMZWdlbmQnO1xuXG5jb25zdCBzdmcgPSBzZWxlY3QoJ3N2ZycpO1xuXG5jb25zdCB3aWR0aCA9ICtzdmcuYXR0cignd2lkdGgnKTtcbmNvbnN0IGhlaWdodCA9ICtzdmcuYXR0cignaGVpZ2h0Jyk7XG5jb25zdCBtYXJnaW4gPSB7IHRvcDogMTAsIHJpZ2h0OiAtNTAsIGJvdHRvbTogOTAsIGxlZnQ6IDQwIH07XG5cbmNvbnN0IGNvbG9yID0gc2NhbGVPcmRpbmFsKHNjaGVtZUNhdGVnb3J5MTApO1xuXG5jb25zdCBjVmFsdWUgPSBkYXRhID0+IGRhdGFbJ0NvbnRpbmVudCddO1xuICBcblxubGV0IGRhdGE7XG5sZXQgeENvbHVtbjtcbmxldCB5Q29sdW1uO1xubGV0IHNlbGVjdGVkTGVnZW5kO1xuXG5cbmNvbnN0IG9uWENvbHVtbkNsaWNrZWQgPSBjb2x1bW4gPT4ge1xuICB4Q29sdW1uID0gY29sdW1uOyAgXG4gIHJlbmRlcigpO1xufTtcblxuY29uc3Qgb25ZQ29sdW1uQ2xpY2tlZCA9IGNvbHVtbiA9PiB7XG4gIHlDb2x1bW4gPSBjb2x1bW47ICBcbiAgcmVuZGVyKCk7XG59O1xuXG5jb25zdCBvbkNsaWNrID0gZCA9PiB7XG4gIHNlbGVjdGVkTGVnZW5kID0gZDtcbi8vICBjb25zb2xlLmxvZyh7c2VsZWN0ZWRMZWdlbmR9KTtcbiAgcmVuZGVyKCk7XG59O1xuXG5jb25zdCBzY2F0dGVyRyA9IHN2Zy5hcHBlbmQoJ2cnKVxuICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApO1xuXG52YXIgdGlwTW91c2VvdmVyID0gZnVuY3Rpb24gKGQpIHtcbiAgdmFyIGh0bWwgPSBkWydDb250aW5lbnQnXSArIFwiPGJyLz5cIiArXG4gICAgXCI8c3BhbiBzdHlsZT0nY29sb3I6XCIgKyBjb2xvcihjVmFsdWUoZCkpICsgXCI7Jz5cIiArIGRbJ1llYXInXSArIFwiPC9zcGFuPjxici8+XCIgK1xuICAgIFwiPGI+XCIgKyBkW3hDb2x1bW5dICsgYDwvYj4gJHt4Q29sdW1ufSwgPGIvPmAgKyBkW3lDb2x1bW5dICsgYDwvYj4gJHt5Q29sdW1ufWA7XG4gIHNlbGVjdCgnLnRvb2x0aXAnKS5odG1sKGh0bWwpXG4gICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVggKyAxNSkgKyBcInB4XCIpXG4gICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSAtIDI4KSArIFwicHhcIilcbiAgICAudHJhbnNpdGlvbigpXG4gICAgLmR1cmF0aW9uKDIwMCkgXG4gICAgLnN0eWxlKFwib3BhY2l0eVwiLCAuOSlcbiAgXG59O1xuXG4vLyB0b29sdGlwIG1vdXNlb3V0IGV2ZW50IGhhbmRsZXJcbnZhciB0aXBNb3VzZW91dCA9IGZ1bmN0aW9uIChkKSB7XG4gIHNlbGVjdCgnLnRvb2x0aXAnKS50cmFuc2l0aW9uKClcbiAgICAuZHVyYXRpb24oMzAwKSBcbiAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xufTtcblxuXG5jb25zdCByZW5kZXIgPSAoKSA9PiB7XG4gIFxuICBzZWxlY3QoJyN4LW1lbnUnKVxuICAgIC5jYWxsKGRyb3BEb3duTWVudSwge1xuICAgICAgb3B0aW9uczogZGF0YS5jb2x1bW5zLmZpbHRlcihjb2x1bW4gPT5cbiAgICAgICAgY29sdW1uICE9PSAnQ291bnRyeScgJiZcbiAgICAgICAgY29sdW1uICE9PSAnU3RhdHVzJyAmJlxuICAgICAgICBjb2x1bW4gIT09ICdBbGNvaG9sJyYmXG4gICAgICAgIGNvbHVtbiAhPT0gJ3BlcmNlbnRhZ2VfZXhwZW5kaXR1cmUnICYmXG4gICAgICAgIGNvbHVtbiAhPT0gJ0hlcGF0aXRpc19CJyAmJlxuICAgICAgICBjb2x1bW4gIT09ICdNZWFzbGVzICcmJiAgICAgICAgXG4gICAgICAgIGNvbHVtbiAhPT0gJ1NjaG9vbGluZycgJiZcbiAgICAgICAgY29sdW1uICE9PSAndW5kZXJfZml2ZV9kZWF0aHMgJyYmXG4gICAgICAgIGNvbHVtbiAhPT0gJ1BvbGlvJyAmJlxuICAgICAgICBjb2x1bW4gIT09ICdUb3RhbF9leHBlbmRpdHVyZScgJiZcbiAgICAgICAgY29sdW1uICE9PSAnRGlwaHRoZXJpYSAnJiZcbiAgICAgICAgY29sdW1uICE9PSAnUG9wdWxhdGlvbicmJiAgICAgICAgXG4gICAgICAgIGNvbHVtbiAhPT0gJyB0aGlubmVzcyAgMS0xOSB5ZWFycycgJiZcbiAgICAgICAgY29sdW1uICE9PSAnIHRoaW5uZXNzIDUtOSB5ZWFycycmJlxuICAgICAgICBjb2x1bW4gIT09ICdJbmNvbWVfY29tcG9zaXRpb25fb2ZfcmVzb3VyY2VzJyAmJlxuICAgICAgICAvL2NvbHVtbiAhPT0gJ3VuZGVyX2ZpdmVfZGVhdGhzJyAmJiBcbiAgICAgICAgY29sdW1uICE9PSAnQ29udGluZW50JyAmJlxuICAgICAgICBjb2x1bW4gIT09ICdpbmZhbnRfZGVhdGhzJyAmJlxuICAgICAgICBjb2x1bW4gIT09IHlDb2x1bW5cbiAgICAgICksXG4gICAgICBvbk9wdGlvbkNsaWNrZWQ6IG9uWENvbHVtbkNsaWNrZWQsXG4gICAgICBzZWxlY3RlZE9wdGlvbjogeENvbHVtblxuICB9KTtcbiAgXG4gIHNlbGVjdCgnI3ktbWVudScpXG4gICAgLmNhbGwoZHJvcERvd25NZW51LCB7XG4gICAgICBvcHRpb25zOiBkYXRhLmNvbHVtbnMuZmlsdGVyKGNvbHVtbiA9PlxuICAgICAgICBjb2x1bW4gIT09ICdDb3VudHJ5JyAmJlxuICAgICAgICBjb2x1bW4gIT09ICdTdGF0dXMnICYmXG4gICAgICAgIGNvbHVtbiAhPT0gJ0FsY29ob2wnJiZcbiAgICAgICAgY29sdW1uICE9PSAncGVyY2VudGFnZV9leHBlbmRpdHVyZScgJiZcbiAgICAgICAgY29sdW1uICE9PSAnSGVwYXRpdGlzX0InICYmXG4gICAgICAgIGNvbHVtbiAhPT0gJ01lYXNsZXMgJyYmICAgICAgICBcbiAgICAgICAgY29sdW1uICE9PSAnU2Nob29saW5nJyAmJlxuICAgICAgICBjb2x1bW4gIT09ICd1bmRlcl9maXZlX2RlYXRocyAnJiZcbiAgICAgICAgY29sdW1uICE9PSAnUG9saW8nICYmXG4gICAgICAgIGNvbHVtbiAhPT0gJ1RvdGFsX2V4cGVuZGl0dXJlJyAmJlxuICAgICAgICBjb2x1bW4gIT09ICdEaXBodGhlcmlhICcgJiZcbiAgICAgICAgY29sdW1uICE9PSAnUG9wdWxhdGlvbicgJiYgICAgICAgIFxuICAgICAgICBjb2x1bW4gIT09ICcgdGhpbm5lc3MgIDEtMTkgeWVhcnMnICYmXG4gICAgICAgIGNvbHVtbiAhPT0gJyB0aGlubmVzcyA1LTkgeWVhcnMnJiZcbiAgICAgICAgY29sdW1uICE9PSAnSW5jb21lX2NvbXBvc2l0aW9uX29mX3Jlc291cmNlcycgJiYgICBcbiAgICAgICAgLy9jb2x1bW4gIT09ICd1bmRlcl9maXZlX2RlYXRocycgJiYgXG4gICAgICAgIGNvbHVtbiAhPT0gJ0NvbnRpbmVudCcgJiZcbiAgICAgICAgY29sdW1uICE9PSAnaW5mYW50X2RlYXRocycgJiZcbiAgICAgICAgY29sdW1uICE9PSB4Q29sdW1uXG4gICAgICApLFxuICAgICAgb25PcHRpb25DbGlja2VkOiBvbllDb2x1bW5DbGlja2VkLFxuICAgICAgc2VsZWN0ZWRPcHRpb246IHlDb2x1bW5cbiAgfSk7XG4gIFxuICBzY2F0dGVyRy5jYWxsKHNjYXR0ZXJQbG90LCB7XG4gICAgeFZhbHVlOiBkID0+IGRbeENvbHVtbl0sXG4gICAgeEF4aXNMYWJlbDogeENvbHVtbixcbiAgICB5VmFsdWU6IGQgPT4gZFt5Q29sdW1uXSxcbiAgICBjaXJjbGVSYWRpdXM6IDQsXG4gICAgeUF4aXNMYWJlbDogeUNvbHVtbixcbiAgICBtYXJnaW46IG1hcmdpbixcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgZGF0YSxcbiAgICBjb2xvcixcbiAgICBjVmFsdWUsXG4gICAgc2VsZWN0ZWRMZWdlbmQsXG4gICAgdGlwTW91c2VvdmVyLFxuICAgIHRpcE1vdXNlb3V0XG4gIH0pO1xuICBcbiAgc3ZnLmNhbGwoY29sb3JMZWdlbmQsIHtcbiAgICBjb2xvcixcbiAgICB3aWR0aCxcbiAgICBvbkNsaWNrLFxuICAgIHNlbGVjdGVkTGVnZW5kXG4gIH0pO1xuICBcbiAgc2VsZWN0KCdib2R5JykuYXBwZW5kKFwiZGl2XCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLCBcInRvb2x0aXBcIilcbiAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xuXG59O1xuXG5jc3YoJ2h0dHBzOi8vZ2lzdC5naXRodWJ1c2VyY29udGVudC5jb20vYWlzaHdhcnlhODYxNS84OWQ5ZjM2ZmMwMTRkZWE2MjQ4N2Y3MzQ3ODY0ZDE2YS9yYXcvTGlmZV9FeHBlY3RhbmN5X0RhdGEuY3N2JylcbiAgLnRoZW4obG9hZGVkRGF0YSA9PiB7XG4gICAgZGF0YSA9IGxvYWRlZERhdGE7XG4gICAgZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgZFsnQWR1bHRfTW9ydGFsaXR5J10gPSArZFsnQWR1bHRfTW9ydGFsaXR5J107XG4gICAgICBkWydpbmZhbnRfZGVhdGhzJ10gPSArZFsnaW5mYW50X2RlYXRocyddO1xuICAgICAgZFsnTGlmZV9leHBlY3RhbmN5ICddID0gK2RbJ0xpZmVfZXhwZWN0YW5jeSAnXTtcbiAgICAgIGRbJ1NjaG9vbGluZyddID0gK2RbJ1NjaG9vbGluZyddO1xuICAgICAgZFsnR0RQJ10gPSArZFsnR0RQJ107XG4gICAgICBkWydZZWFyJ10gPSArZFsnWWVhciddO1xuICAgICAgZFsnIEhJVi9BSURTJ10gPSArZFsnIEhJVi9BSURTJ107XG4gICAgICBkWydBbGNvaG9sJ10gPSArZFsnQWxjb2hvbCddO1xuICAgICAgIGRbJ0JNSSddID0gK2RbJ0JNSSddO1xuICAgIH0pO1xuICAgIHhDb2x1bW4gPSBkYXRhLmNvbHVtbnNbMTZdO1xuICAgIHlDb2x1bW4gPSBkYXRhLmNvbHVtbnNbNF07XG4gICAgcmVuZGVyKCk7XG59KTtcblxuIl0sIm5hbWVzIjpbInNjYWxlTG9nIiwiZXh0ZW50IiwiZm9ybWF0IiwiYXhpc0JvdHRvbSIsImF4aXNMZWZ0Iiwic2VsZWN0Iiwic2NhbGVPcmRpbmFsIiwic2NoZW1lQ2F0ZWdvcnkxMCIs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