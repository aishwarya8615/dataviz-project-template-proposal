(function (React$1, ReactDOM, d3, ReactDropdown) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;
  ReactDropdown = ReactDropdown && ReactDropdown.hasOwnProperty('default') ? ReactDropdown['default'] : ReactDropdown;

  const csvUrl =
    'https://gist.githubusercontent.com/aishwarya8615/89d9f36fc014dea62487f7347864d16a/raw/Life_Expectancy_Data.csv';

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = d => {
        d.Life_expectancy  = +d.Life_expectancy ;
        d.Total_expenditure = +d.Total_expenditure;
        d.Year = +d.Year;
        //d.Continent = +d.Continent;
        d.percentage_expenditure = +d.percentage_expenditure;
        d.GDP = +d.GDP;
        //d.Schooling = +d.Schooling;
        d.Year = +d.Year ;
        d.Status = +d.Status ;
        d.Alcohol = +d.Alcohol;
        d.Diphtheria = +d.Diphtheria;
        //d.Schooling = +d.Schooling;
        d.Polio = +d.Polio; 
        d.Hepatitis_B = +d.Hepatitis_B;  
        d.Adult_Mortality = +d.Adult_Mortality;  
        d.infant_deaths = +d.infant_deaths;   
        d.Measles = +d.Measles; 
        d.under_five_deaths = +d.under_five_deaths; 
        d.Income_composition_of_resources = +d.Income_composition_of_resources; 
        return d;
      };
      d3.csv(csvUrl, row).then(setData);
    }, []);
    
    return data;
  };

  const AxisBottom = ({ xScale, innerHeight, tickFormat, tickOffset = 3 }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', {
        className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + tickOffset },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale, innerWidth, tickOffset = 3 }) =>
    yScale.ticks().map(tickValue => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -tickOffset, dy: ".32em" },
          tickValue
        )
      )
    ));

  const Marks = ({
    data,
    xScale,
    xValue,
    yScale,
    yValue,
    colorScale,
    colorValue,
    circleScale,
    circleValue,
    tooltipFormat,
  }) =>
    data.map(d => (
      React.createElement( 'circle', {
        className: "mark", cx: xScale(xValue(d)), cy: yScale(yValue(d)), fill: colorScale(colorValue(d)), r: circleScale(circleValue(d)) },
        React.createElement( 'title', null, tooltipFormat(yValue(d),xValue(d)) )
      )
    ));

  const ColorLegend = ({
    colorScale,
    tickSpacing = 20,
    tickSize = 10,
    tickTextOffset = 20,
    onHover,
    hoveredValue,
    fadeOpacity
  }) =>
    colorScale.domain().map((domainValue, i) => (
      React.createElement( 'g', {
        className: "tick", transform: `translate(0,${i * tickSpacing})`, onMouseEnter: () => {
          onHover(domainValue);
        }, onMouseOut: () => {
          onHover(null);
        }, opacity: hoveredValue && domainValue !== hoveredValue ? fadeOpacity : 1 },
        React.createElement( 'circle', { fill: colorScale(domainValue), r: tickSize }),
        React.createElement( 'text', { x: tickTextOffset, dy: ".32em" },
          domainValue
        )
      )
    ));

  const width = 960;
  const menuHeight = 80;
  const height = 500 - menuHeight;
  const margin = { top: 20, right: 200, bottom: 65, left: 90 };
  const xAxisLabelOffset = 55;
  const yAxisLabelOffset = 55;
  const fadeOpacity = 0.2;

  const attributes = [
    { value: 'infant_deaths', label: 'Infant deaths' },
    //{ value: 'Continent', label: 'Continent' },
    { value: 'Life_expectancy ', label: 'Life expectancy ' } ,
    //{ value: 'GDP', label: 'GDP' } ,
    //{ value: 'Income_composition_of_resources', label: 'Income Composition' } ,
    //{ value: 'Status', label: 'Status' } ,
    //{ value: 'BMI ', label: 'BMI' } ,
    { value: 'Adult_Mortality', label: 'Adult Mortality' } ,
    //{ value: 'Diphtheria', label: 'Diphtheria' } ,
    //{ value: 'Measles ', label: 'Measles ' } ,

  ];

  const getLabel = value => {
    for (let i = 0; i < attributes.length; i++) {
      if (attributes[i].value === value) {
        return attributes[i].label;
      }
    }
  };

  const App = () => {
    const data = useData();
    const [hoveredValue, setHoveredValue] = React$1.useState(null);
    
    const initialXAttribute = 'infant_deaths';
    const [xAttribute, setXAttribute] = React$1.useState(initialXAttribute);
    const xValue = d => d[xAttribute];
    const xAxisLabel = getLabel(xAttribute);

    const initialYAttribute = 'Life_expectancy ';
    const [yAttribute, setYAttribute] = React$1.useState(initialYAttribute);
    const yValue = d => d[yAttribute];
    const yAxisLabel = getLabel(yAttribute);
    
    const initialradiusAttribute = 'GDP';
    const [radiusAttribute, setradiusAttribute] = React$1.useState(initialradiusAttribute);
    const radiusValue = d => d[radiusAttribute];

    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;


    const colorValue = d => d.Continent;
    const colorLegendLabel = 'Continent';

    const filteredData = data.filter(d => hoveredValue === colorValue(d));

    const circleRadius = 7;

    const siFormat = d3.format('.2s');
    const xAxisTickFormat = tickValue => siFormat(tickValue).replace('G', 'B');
    const yAxisTickFormat = tickValue => siFormat(tickValue).replace('G', 'B');


    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth])
      .nice();

    const yScale = d3.scaleLinear()
      .domain(d3.extent(data, yValue))
      .range([innerHeight, 0]);

    const radiusScale = d3.scaleLinear()
      .domain(d3.extent(data, radiusValue))
      .range([2, 20]); 
    
    const colorScale = d3.scaleOrdinal()
      .domain(data.map(colorValue))
      .range(['lightgreen', 'lightblue', 'brown', 'gold', 'teal','orange', 'cyan', 'grey']);
    
    
    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { className: "menus-container" },
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "X"),
          React$1__default.createElement( ReactDropdown, {
            options: attributes, value: xAttribute, onChange: ({ value }) => setXAttribute(value) }),
           React$1__default.createElement( 'span', { className: "dropdown-label" }, "Y"),
          React$1__default.createElement( ReactDropdown, {
            options: attributes, value: yAttribute, onChange: ({ value }) => setYAttribute(value) })
        ),
        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
            React$1__default.createElement( AxisBottom, {
              xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat, tickOffset: 5 }),

          React$1__default.createElement( 'text', {
              className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},${innerHeight /
              2}) rotate(-90)` },
              yAxisLabel
            ),
          
        React$1__default.createElement( AxisLeft, { yScale: yScale, innerWidth: innerWidth, tickOffset: 5 }),
            React$1__default.createElement( 'text', {
              className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
              xAxisLabel
            ),
          
          
          React$1__default.createElement( 'g', { transform: `translate(${innerWidth + 60}, 60)` },
              React$1__default.createElement( 'text', { x: 35, y: -25, className: "axis-label", textAnchor: "middle" },
                colorLegendLabel
              ),
              React$1__default.createElement( ColorLegend, {
                tickSpacing: 22, tickSize: 10, tickTextOffset: 12, tickSize: circleRadius, colorScale: colorScale, onHover: setHoveredValue, hoveredValue: hoveredValue, fadeOpacity: fadeOpacity })
            ),
   		
   		React$1__default.createElement( 'g', { opacity: hoveredValue ? fadeOpacity : 1 },
            React$1__default.createElement( Marks, {
              data: data, xScale: xScale, xValue: xValue, yScale: yScale, yValue: yValue, colorScale: colorScale, colorValue: colorValue, circleScale: radiusScale, circleValue: radiusValue, tooltipFormat: yAxisTickFormat, circleRadius: circleRadius })
          ),
           React$1__default.createElement( Marks, {
              data: filteredData, xScale: xScale, xValue: xValue, yScale: yScale, yValue: yValue, colorScale: colorScale, colorValue: colorValue, circleScale: radiusScale, circleValue: radiusValue, tooltipFormat: yAxisTickFormat, circleRadius: circleRadius })
        )
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, ReactDropdown));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,